@model BeautiesAndBarbers.Models.ClientList

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>@ViewBag.EmployeeName's Client List</h4>
        <hr />
        @Html.HiddenFor(model => model.EmployeeId)        

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control", @style = "display: none" } })
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })                
                @Html.ActionLink("New Customer", "Create", "Customers", new { ReturnUrl = ViewBag.ReturnUrl }, new { })
            </div>
        </div>

        @*
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerId", null, "Select a Customer", htmlAttributes: new { @class = "form-control" })
                @Html.ActionLink("New Customer", "Create", "Customers", new { ReturnUrl = ViewBag.ReturnUrl }, new { })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        *@
        <div class="form-group">
            @Html.LabelFor(model => model.ServiceId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ServiceId", null, "Select a Service", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })                
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Appointment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Appointment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Appointment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { id = Model.EmployeeId})
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            function updateTextBox(event, ui) {
                $(this).val(ui.item.CustomerName);
                $('#CustomerId').val(ui.item.CustomerId)
                return false;
            }
            function cleanTextBox(event, ui) {
                $('#CustomerId').val(0);
                return true;
            }

            $('#CustomerName').autocomplete({
                minLength: 2,
                search : cleanTextBox,
                focus: updateTextBox,
                select: updateTextBox,
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Content("~/API/Customers/GetList")',
                        method: 'post',
                        dataType: 'json',
                        contentType: 'application/json',
                        data: JSON.stringify({ UserId: @ViewBag.EmployeeUserId, Term: request.term }),
                        success: function (data) {
                            response(data);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert(errorThrown);
                        }
                    });
                }
            }).autocomplete('instance')._renderItem = function (ul, item) {

                return $('<li>')
                    .append('<div><img class="picture" src=../..' + item.Picture.substring(1) + ' alt=' + item.CustomerName + '/><span style="width:100%">' + item.CustomerName + '</span></div>')
                    .appendTo(ul);
            }
        });
    </script>
    <style>
        .picture{
            width:46px;
            height:46px;
            margin-right:3px;
        }
    </style>
}
